//每个task都会经历 初始化,配置,执行 这一套完整的生命周期流程


//声明一个task
//task xfhyTask
//xfhyTask {
//    //执行在gradle生命周期的第二个阶段,即配置阶段
//    println("hello~")
//
//    //给task附带一些执行动作(Action),执行在gradle生命周期的第三个阶段
//    doFirst {
//        println("start")
//    }
//    doLast {
//        println("end")
//    }
//}
//
////创建一个xfhyNextTask,这个task依赖于xfhyTask
////必须先执行完xfhyTask,才能去执行xfhyNextTask,由此它们之间组成了一个有向无环图:xfhyTask->xfhyNextTask
//task xfhyNextTask(dependsOn: "xfhyTask") {
//    doLast {
//        println("end?")
//    }
//}


//--------Task的定义及配置
//Task 定义方式1: 直接通过task函数去创建(在"()"可以不指定group和description属性)
task myTask1(group: "MyTask", description: "task1") {
    println("this is mytask1")
}

//Task定义方式2 : 通过TaskContainer 去创建Task
this.tasks.create(name: "myTask2") {
    setGroup("MyTask")
    setDescription("task2")
    println("this is mytask2")
}

//----------Task 自定义属性
task Gradle_First() {
    ext.good = true
}
task Gradle_Last() {
    doLast {
        println("I am not ${Gradle_First.name}")
        println("good ? ${Gradle_First.good}")
    }
}

//--------defaultTasks关键字标识默认执行任务
//defaultTasks "Gradle_First","Gradle_Last"


//task通常使用doFirst和doLast两个方式用于在执行期间进行操作.
task myTask3(group: "MyTask", description: "task3") {
    //配置阶段会执行这个
    println("this is mytask3")

    //执行阶段 这里执行顺序是第2个
    doFirst {
        println("this group is 2")
    }
    //执行阶段 这里执行顺序是第3个
    doLast {
        println("this description is 3")
    }
}

myTask3.doFirst {
    //扩展一个属性,用于计算用时
    myTask3.ext.startTime = System.currentTimeMillis()
    println("开始时间: ${myTask3.ext.startTime}")

    //执行阶段 这里执行顺序是第一个
    println("this group is 1")
}
myTask3.doLast {

//    println("结束时间: ${System.currentTimeMillis()}")
    println("myTask3 耗时: ${System.currentTimeMillis() - myTask3.ext.startTime}")
}
