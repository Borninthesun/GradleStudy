import com.xfhy.plugin.CustomPlugin
import com.xfhy.plugin.MyAndroidPlugin
import com.xfhy.plugin.HookAssetsPlugin

apply plugin: 'com.android.application'
apply plugin: CustomPlugin
apply plugin: MyAndroidPlugin
apply plugin: HookAssetsPlugin
//apply from: 'file.gradle'
//apply from: 'task.gradle'
apply from: 'net.gradle'

testExtension {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    applicationId 'com.xfhy.gradledemo'
    minSdkVersion '22'
}

android {
    compileSdkVersion Config.compileSdkVersion
    buildToolsVersion Config.buildToolsVersion
    defaultConfig {
        applicationId Config.applicationId
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName

        buildConfigField("String[]", "TAB", "{\"首页\",\"排行榜\",\"我的\"}")
        buildConfigField("String", "APP_DESCRIPTION", "\"你没有见过的船新版本\"")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
        }
        free {
            java.srcDirs = ['src/free/java']
        }

        svip {
            java.srcDirs = ['src/common/java']
        }

        vip {
            java.srcDirs = ['src/common/java']
        }
    }

    signingConfigs {
        debug {
            storeFile file('../keys/xfhy.jks')
            storePassword "qqqqqq"
            keyAlias "xfhy"
            keyPassword "qqqqqq"
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            storeFile file('../keys/xfhy.jks')
            storePassword "qqqqqq"
            keyAlias "xfhy"
            keyPassword "qqqqqq"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    flavorDimensions "channel"
    productFlavors {
        free {
            dimension "channel"
            //程序包名
            applicationId "com.xfhy.free"
            //替换清单文件中的标签
            manifestPlaceholders = [
                    APP_ICON: "@drawable/ic_launcher",
                    APP_NAME: "xx免费版",
            ]
            //versionName
            versionName "2.0.0"
            //versionCode
            versionCode 2
        }
        vip {
            dimension "channel"
            //程序包名
            applicationId "com.xfhy.vip"
            //替换清单文件中的标签
            manifestPlaceholders = [
                    APP_ICON: "@drawable/ic_launcher",
                    APP_NAME: "xxVip版",
            ]
            //versionName
            versionName "3.0.0"
            //versionCode
            versionCode 3
        }
        svip {
            dimension "channel"
        }
    }

    //返回应用程序项目包含的构建变体的集合
    applicationVariants.all { variant ->

        //构建变体专属变量
        switch (variant.flavorName) {
            case 'free':
                buildConfigField("String", "BASE_URL", "\"http://31.13.66.23\"")
                buildConfigField("String", "TOKEN", "\"dhaskufguakfaskfkjasjhbfree\"")
                break
            case 'vip':
                buildConfigField("String", "BASE_URL", "\"http://31.13.66.24\"")
                buildConfigField("String", "TOKEN", "\"dhaskfagafkjasjhbvip\"")
                break
            case 'svip':
                buildConfigField("String", "BASE_URL", "\"http://31.13.66.25\"")
                buildConfigField("String", "TOKEN", "\"dhaskufgufgsdagajasjhbsvip\"")
                break
        }

        //打包文件命名
        variant.outputs.all {
            def type = variant.buildType.name
            def channel = variant.flavorName
            //eg: demo_2.0.0_free_debug
            outputFileName = "demo_${variant.versionName}_${channel}_${type}.apk"
            //println("name :${variant.name} , baseName:${variant.baseName}")   输出eg: name :freeRelease , baseName:free-release
        }

        //这里可以通过variant.taskName 来获取相应的task,这里的taskName是task的名字
        //示范: 获取检查清单文件的task
        //def task = variant.checkManifest
        def task = variant.getCheckManifestProvider()
        println(task.name)

    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation Config.depConfig.support.recyclerview_androidx
}